#if NETFRAMEWORK

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;
using Xunit.Internal;

public class CSharpAcceptanceTestV3Assembly : CSharpAcceptanceTestAssembly
{
	public CSharpAcceptanceTestV3Assembly(string? basePath = null) :
		base(basePath)
	{ }

	protected override string AssemblyFileExtension => ".exe";

	protected override IEnumerable<string> GetStandardReferences() =>
		base
			.GetStandardReferences()
			.Concat([
				"System.Threading.Tasks.Extensions.dll",
				"xunit.v3.assert.dll",
				"xunit.v3.common.dll",
				"xunit.v3.core.dll",
				"xunit.v3.runner.common.dll",
				"xunit.v3.runner.inproc.console.dll",
			]);

	public static ValueTask<CSharpAcceptanceTestV3Assembly> Create(
		string code,
		params string[] references) =>
			CreateIn(Path.GetDirectoryName(typeof(CSharpAcceptanceTestV3Assembly).Assembly.GetLocalCodeBase())!, code, references);

	public static async ValueTask<CSharpAcceptanceTestV3Assembly> CreateIn(
		string baseFolder,
		string code,
		params string[] references)
	{
		Guard.ArgumentNotNull(baseFolder);
		Guard.ArgumentNotNull(code);
		Guard.ArgumentNotNull(references);

		var baseFolderPath = Path.GetFullPath(baseFolder);
		Assert.True(Directory.Exists(baseFolderPath), $"Base folder '{baseFolder}' does not exist");

		var testFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetLocalCodeBase());
		Assert.NotNull(testFolder);

		var programPath = Path.Combine(testFolder, "..", "..", "..", "..", "xunit.v3.core", "Package", "content", "AutoGeneratedEntryPoint.cs");
		programPath = Path.GetFullPath(programPath);
		Assert.True(File.Exists(programPath), $"Cannot find '{programPath}' to include into compilation");
		var programText = File.ReadAllText(programPath);

		var excludeFromCodeCoveragePath = Path.Combine(testFolder, "..", "..", "..", "..", "common", "ExcludeFromCodeCoverageAttribute.cs");
		excludeFromCodeCoveragePath = Path.GetFullPath(excludeFromCodeCoveragePath);
		Assert.True(File.Exists(excludeFromCodeCoveragePath), $"Cannot find '{excludeFromCodeCoveragePath}' to include into compilation");
		var excludeFromCodeCoverageText = File.ReadAllText(excludeFromCodeCoveragePath);

		var assembly = new CSharpAcceptanceTestV3Assembly(baseFolderPath);
		await assembly.Compile([code, programText, excludeFromCodeCoverageText], references);
		return assembly;
	}
}

#endif
